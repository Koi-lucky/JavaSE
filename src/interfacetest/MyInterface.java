package interfacetest;

/*
****【一、接口的介绍】****
接口就是多个类的公共典范。
接口是一种引用数据类型，最重要的内容就是其中的：【抽象方法】。

如何定义一个接口的格式：
public interface 接口名称 {
    //接口内容
}
【备注】换成了关键字interface之后，编译生成的字节码文件仍然会是：.java --> .class。

如果是Java7，那么接口可以包含的内容有;
1.常量（成员变量其实就是常量；常量必须进行赋值，一旦赋值不可更改；常量名称完全大写，用下划线进行分隔）
    [public] [static] [final] 数据类型 常量名称 = 数据值；
2.抽象方法【最重要】（实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类）
    [public] [abstract] 返回值类型 方法名称(参数列表)；

如果是Java8，还可以额外包含有;
3.默认方法（默认方法也可以被覆盖重写）
    [public] default 返回值类型 方法名称(参数列表) { 方法体 }；
4.静态方法（应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法）
    [public] static 返回值类型 方法名称(参数列表) { 方法体 }；

如果是Java9（及以上），还可以额外包含有;
5.私有方法（private的方法只有接口自己才能调用，不能被实现类或者别人使用）
    普通私有方法：private 返回值类型 方法名称(参数列表) { 方法体 }；
    静态私有方法：private static 返回值类型 方法名称(参数列表) { 方法体 }；

*
*
*****【二、接口的使用】****
* 1.使用步骤：
*   （1）接口不能直接使用，必须有一个“实现类”来“实现”该接口；
*       格式：
*           public class 实现类名称 implements 接口名称 {
*                  //....
*           }
*   （2）接口的实现类必须覆盖重写（实现）接口中所有的抽象方法。
*       实现：去掉abstract关键字，加上方法体大括号。
*
*   （3）创建实现类的对象，进行使用。
*
* 【注意事项】：如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。（就相当于有些抽象方法没管，就好比是直接把他继承了放在你这里，抽象方法所在的类必须是抽象类，所以你要不然就全部覆盖重写，哪怕有一个没有覆盖重写他，你都得是抽象类）

 * */

public class MyInterface {

    public static void main(String[] args) {
        //错误写法！不能直接new接口对象来使用
  //      MyInterfaceAbstract inter = new MyInterfaceAbstract();

        //创建实现类的对象使用
        MyInterfaceAbstractImpl impl = new MyInterfaceAbstractImpl();
        impl.methodAbs1();;
        impl.methodAbs2();

    }
}
